function persistence(num: number): number {
 // your code here
  
  // let us check position by position and when no encountered digit on next position: exit
  
  var increment: number = 0;
  
  var digitarray: number[] = [];
  
  var numcopy: number = num;
  
  function returnproduct(numin:number ): number {

    /* Make a digit array from the numin */
    
    while (numin != 0) {
      digitarray.push(numin % 10);
      numin = Math.trunc(numin / 10);
    }
    
    if (digitarray.length == 1) {
      return 0; 
    }
    
    var arrayproduct: number = 1;

    /* Mess up when we have zero somewhere */
    
    for(let i = 0; i < digitarray.length; i++) {
        arrayproduct*=digitarray[i];
    }
    
    digitarray = [];

    /* Cheesy solution */

    if (arrayproduct == 0) {
      increment++;
    }
    
    return numcopy = arrayproduct;
  }
  
  while(returnproduct(numcopy) != 0) {
    increment++;
  }
  
  return increment;
  
}

console.log(persistence(25));

/* A better code warrior has this non-recursive solution:

BoffinWritesCode, egsumar
export function persistence(num: number): number {
  let count = 0
  while (num > 9) {
    num = String(num).split('').map(d => +d).reduce((prev, current) => prev *= current);
    count++;
  }
  return count;
}

*/